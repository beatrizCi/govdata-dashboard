<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>GovData Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-100 min-h-screen">
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <aside class="w-64 bg-gray-900 text-white flex flex-col py-8 px-6">
      <div class="flex items-center mb-10">
        <div class="bg-white rounded-full w-10 h-10 flex items-center justify-center mr-3">
          <span class="text-2xl font-bold text-blue-600">G</span>
        </div>
        <span class="text-xl font-semibold">GovData</span>
      </div>
      <nav class="flex-1">
        <ul class="space-y-2">
          <li>
            <a href="#" class="flex items-center px-3 py-2 rounded-lg bg-gradient-to-r from-purple-600 to-indigo-600 font-semibold">
              <span class="material-icons mr-3">dataset</span> Dashboard
            </a>
          </li>
          <li>
            <a href="https://www.govdata.de/" target="_blank" class="flex items-center px-3 py-2 rounded-lg hover:bg-gray-800">
              <span class="material-icons mr-3">public</span> GovData
            </a>
          </li>
        </ul>
      </nav>
    </aside>

    <!-- Main -->
    <main class="flex-1 p-10">
      <div id="app" class="max-w-5xl mx-auto bg-white rounded-2xl shadow-lg p-8">
        <div class="flex items-center justify-between mb-6">
          <div>
            <h1 class="text-2xl font-bold">Federal Ministries</h1>
            <p class="text-gray-500 text-sm">Number of datasets published by each ministry and its subordinates</p>
          </div>
          <a href="https://www.govdata.de/" target="_blank" class="bg-black text-white px-5 py-2 rounded-lg font-semibold">Go to GovData</a>
        </div>

        <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6 gap-4">
          <input v-model="search" type="text" placeholder="Search ministry..."
                 class="w-full md:w-1/3 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" />
          <button @click="exportCSV" class="bg-green-600 hover:bg-green-700 text-white px-5 py-2 rounded-lg font-semibold">
            Export CSV
          </button>
        </div>

        <div class="overflow-x-auto mb-10">
          <table class="w-full table-auto border-collapse">
            <thead class="bg-gray-50 border-b">
              <tr>
                <th class="px-4 py-3 text-left font-semibold">Ministry</th>
                <th class="px-4 py-3 text-left font-semibold"># of Datasets</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="(d, idx) in filtered" :key="d.departmentName"
                  :class="(idx % 2 === 0 ? 'bg-white' : 'bg-gray-50') + ' hover:bg-gray-100'">
                <td class="px-4 py-3 border-t font-medium text-gray-900">{{ d.departmentName }}</td>
                <td class="px-4 py-3 border-t text-gray-700">{{ d.numberOfDatasets }}</td>
              </tr>
            </tbody>
          </table>
        </div>

        <div class="bg-gray-50 rounded-xl p-6 shadow-inner">
          <h2 class="text-lg font-semibold mb-4">Datasets by Ministry (Bar Chart)</h2>
          <canvas id="datasetsBarChart" height="120"></canvas>
        </div>
      </div>
    </main>
  </div>

  <!-- Inject server data -->
  <script id="departments-data" type="application/json">
    <%- JSON.stringify(departmentDatasetCounts) %>
  </script>

  <!-- Vue app (no Vite) -->
  <script>
    const { createApp, ref, computed, onMounted, watch } = Vue;

    const app = createApp({
      setup() {
        /** @type {{departmentName:string, numberOfDatasets:number}[]} */
        const departments = ref([]);
        const search = ref("");

        const filtered = computed(() => {
          if (!search.value) return departments.value;
          const q = search.value.toLowerCase();
          return departments.value.filter(d => d.departmentName.toLowerCase().includes(q));
        });

        function exportCSV() {
          let csv = "Ministry,# of Datasets\n";
          filtered.value.forEach(d => {
            csv += `"${d.departmentName.replace(/"/g, '""')}",${d.numberOfDatasets}\n`;
          });
          const blob = new Blob([csv], { type: "text/csv" });
          const url = URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = "ministries_datasets.csv";
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        }

        let chart;
        function renderChart() {
          const ctx = document.getElementById("datasetsBarChart").getContext("2d");
          if (chart) chart.destroy();
          chart = new Chart(ctx, {
            type: "bar",
            data: {
              labels: filtered.value.map(d => d.departmentName),
              datasets: [{
                label: "# of Datasets",
                data: filtered.value.map(d => d.numberOfDatasets),
                backgroundColor: "rgba(99, 102, 241, 0.7)",
                borderColor: "rgba(99, 102, 241, 1)",
                borderWidth: 1
              }]
            },
            options: {
              responsive: true,
              plugins: { legend: { display: false } },
              scales: { y: { beginAtZero: true } }
            }
          });
        }

        onMounted(() => {
          // hydrate from server-injected JSON
          try {
            const raw = document.getElementById("departments-data")?.textContent || "[]";
            departments.value = JSON.parse(raw);
          } catch { departments.value = []; }
          renderChart();
        });

        watch(filtered, () => renderChart(), { deep: true });

        return { search, filtered, exportCSV };
      }
    });

    app.mount("#app");
  </script>
</body>
</html>
